# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: python_publish

on:
  push:
    # This will only execute on the release branch
    branches: [ release ]

jobs:
  build_and_test:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v2

    # Configure compilers for Windows 64bit. Does nothing on Linux/Mac.
    - name: Enable Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build wheels
      uses: joerick/cibuildwheel@v1.10.0
      with:
        output-dir: wheelhouse
      # to supply options, put them in 'env', like:
      env:
        CIBW_SKIP: cp27-* *-win32 pp*
        CIBW_TEST_REQUIRES: -r requirements/tests.txt
        CIBW_TEST_COMMAND: python {project}/run_tests.py

    
    # Configure compilers for Windows 32bit. Does nothing on Linux/Mac.
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86

    - name: Build wheels win32
      if: matrix.os == 'windows-latest'
      uses: joerick/cibuildwheel@v1.10.0
      with:
        output-dir: wheelhouse
      # to supply options, put them in 'env', like:
      env:
        CIBW_BUILD: cp3*-win32
        CIBW_TEST_REQUIRES: -r requirements/tests.txt
        CIBW_TEST_COMMAND: python {project}/run_tests.py

    - name: Show built files
      shell: bash
      run: ls -la wheelhouse

    - uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: ./wheelhouse/*.whl

  deploy:
    name: Uploading to PyPi
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [build_and_test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install built dependencies
        run: pip install -r requirements/build.txt
      - name: Build sdist
        run: python setup.py sdist

      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: dist

      - name: Show files to upload
        shell: bash
        run: ls -la dist
      - name: Sign and Publish
        env:
          # Toggle comments to publish to the test pypi instead of the real one
          #TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
          #PYUTILS_TWINE_USERNAME: ${{ secrets.PYUTILS_TWINE_USERNAME }}
          #PYUTILS_TWINE_PASSWORD: ${{ secrets.PYUTILS_TWINE_PASSWORD }}
          TEST_TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
          PYUTILS_TEST_TWINE_USERNAME: ${{ secrets.PYUTILS_TEST_TWINE_USERNAME }}
          PYUTILS_TEST_TWINE_PASSWORD: ${{ secrets.PYUTILS_TEST_TWINE_PASSWORD }}
        run: |
          ls -al
          GPG_EXECUTABLE=gpg
          $GPG_EXECUTABLE --version
          openssl version
          $GPG_EXECUTABLE --list-keys
          export PYUTILS_CI_GITHUB_SECRET=${{ secrets.PYUTILS_CI_GITHUB_SECRET }}
          GLKWS=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/cci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
          GLKWS=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/cci_gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
          GLKWS=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/cci_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
          $GPG_EXECUTABLE --list-keys  || echo "first one fails for some reason"
          $GPG_EXECUTABLE --list-keys  
          MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
          VERSION=$(python -c "import setup; print(setup.VERSION)") 
          pip install twine
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
          GPG_KEYID=$(cat dev/public_gpg_key)
          echo "GPG_KEYID = '$GPG_KEYID'"
          #
          #export TWINE_REPOSITORY_URL=https://test.pypi.org/legacy/
          #export PYUTILS_TEST_TWINE_USERNAME=${{ secrets.PYUTILS_TEST_TWINE_USERNAME }}
          #export PYUTILS_TEST_TWINE_PASSWORD=${{ secrets.PYUTILS_TEST_TWINE_PASSWORD }}
          #MB_PYTHON_TAG=$MB_PYTHON_TAG \
          #    DO_GPG=True GPG_KEYID=$GPG_KEYID \
          #    TWINE_REPOSITORY_URL=${TWINE_REPOSITORY_URL} \
          #    TWINE_USERNAME=$PYUTILS_TEST_TWINE_USERNAME \
          #    TWINE_PASSWORD=$PYUTILS_TEST_TWINE_PASSWORD \
          #    GPG_EXECUTABLE=$GPG_EXECUTABLE \
          #    DO_UPLOAD=True \
          #    DO_TAG=False ./publish.sh
          #
          export TWINE_REPOSITORY_URL=https://upload.pypi.org/legacy/
          export PYUTILS_TWINE_USERNAME=${{ secrets.PYUTILS_TWINE_USERNAME }}
          export PYUTILS_TWINE_PASSWORD=${{ secrets.PYUTILS_TWINE_PASSWORD }}
          MB_PYTHON_TAG=$MB_PYTHON_TAG \
              DO_GPG=True GPG_KEYID=$GPG_KEYID \
              TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD \
              TWINE_USERNAME=$PYUTILS_TWINE_USERNAME \
              GPG_EXECUTABLE=$GPG_EXECUTABLE \
              DO_UPLOAD=True \
              DO_TAG=False ./publish.sh 
       
###
# Unfortunately we cant (yet) use the yaml docstring trick here
# https://github.community/t/allow-unused-keys-in-workflow-yaml-files/172120
#__doc__: |
#    # How to run locally
#    # https://packaging.python.org/guides/using-testpypi/
#    cd $HOME/code
#    git clone https://github.com/nektos/act.git $HOME/code/act
#    cd $HOME/code/act
#    chmod +x install.sh
#    ./install.sh -b $HOME/.local/opt/act
#    cd $HOME/code/line_profiler

#    load_secrets
#    unset GITHUB_TOKEN
#    $HOME/.local/opt/act/act \
#        --secret=PYUTILS_TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD \
#        --secret=PYUTILS_TWINE_USERNAME=$PYUTILS_TWINE_USERNAME \
#        --secret=PYUTILS_CI_GITHUB_SECRET=$PYUTILS_CI_GITHUB_SECRET \
#        --secret=PYUTILS_TEST_TWINE_USERNAME=$PYUTILS_TEST_TWINE_USERNAME \
#        --secret=PYUTILS_TEST_TWINE_PASSWORD=$PYUTILS_TEST_TWINE_PASSWORD 
